from random import randint
from gmpy2 import *
from Crypto.Util.number import *


m = bytes_to_long(b'flag{********************************}')

def getprime(bits):
    while 1:
        n = 1
        while n.bit_length() < bits:
            n *= next_prime(randint(1,1000))
        if isPrime(n - 1):
            return n - 1

p = getprime(512)
q = getprime(512)
n = p*q
e = 65537
d = invert(e,(p-1)*(q-1))
c = pow(m,e,n)

res = []
mod = []
[mod.append(getprime(128)) for i in range(12)]
[res.append(c%mod[i]) for i in range(12)]
print(n,(p>>128)<<128),mod,res)

'''
output:
3216831712236484919804716473942409526434016529181790011140718891645020999952523287950679312500771653918738887189899203815116997399422419456666136527466294225647700744715569996552708989626431982330367733125015062070399091789218760399060531383324158096784030850407432126491091299460659042468401054516052600467997
36691536769373164488130311421517753226870999465362409179446664596323017708216823951466573340643687346264018616414288774195411449434676147898363218552160256
[127358722814661886628344839530462144916373, 1569005233424413714924223862235964763229, 15953826944429720811716497916877126603181, 22667750449179799152236917772041505492557, 7259500259309895932387328648172298540473, 1216723397014858024629084355784570444737, 5803969258694833349275399163572927306963, 2847514965593473340352693322675908465517, 55965603506094486681210827499140188004581, 3758825246939161175629619499256754206153, 9865309015695677187200661453839724337633, 1985189335531812324455545509044214546841)]
[17514122934988110165886587218707943859589, 828023569353871016099054873610645592579, 3834965867062595899595546144451189629655, 5083410101797762407471893731877939884166, 6199590917760184276466050254032811548454, 208337506454727094683323122852921121527, 5210709327454808237359999225611588134922, 239093795148407379152016295908193630983, 29793049900271876372064873251244672365333, 1641943491807405218384351799880631607416, 1685895805013787734204509484411577153108, 1511298522529374764380482522275435302730)]
'''


恢复p的低位：
sage: n = 3216831712236484919804716473942409526434016529181790011140718891645020999952523287950679312500771
....: 65391873888718989920381511699739942241945666613652746629422564770074471556999655270898962643198233036
....: 77331250150620703990917892187603990605313833241580967840308504074321264910912994606590424684010545160
....: 52600467997
sage: p = 3669153676937316448813031142151775322687099946536240917944666459632301770821682395146657334064368
....: 7346264018616414288774195411449434676147898363218552160256
sage: pbits = 512
sage: kbits = 128
sage: PR.<x> = PolynomialRing(Zmod(n))
sage: f = p + x
sage: x0 = f.small_roots(X=2^kbits, beta=0.4)[0]
sage: print(p + int(x0))
36691536769373164488130311421517753226870999465362409179446664596323017708216823951466573340643687346264018616414289061014410434943387973225734363385787789



import gmpy2
import libnum

e = 65537
n = 3216831712236484919804716473942409526434016529181790011140718891645020999952523287950679312500771653918738887189899203815116997399422419456666136527466294225647700744715569996552708989626431982330367733125015062070399091789218760399060531383324158096784030850407432126491091299460659042468401054516052600467997
p = 36691536769373164488130311421517753226870999465362409179446664596323017708216823951466573340643687346264018616414289061014410434943387973225734363385787789

mod = [127358722814661886628344839530462144916373, 1569005233424413714924223862235964763229, 15953826944429720811716497916877126603181, 22667750449179799152236917772041505492557, 7259500259309895932387328648172298540473, 1216723397014858024629084355784570444737, 5803969258694833349275399163572927306963, 2847514965593473340352693322675908465517, 55965603506094486681210827499140188004581, 3758825246939161175629619499256754206153, 9865309015695677187200661453839724337633, 1985189335531812324455545509044214546841]
res = [17514122934988110165886587218707943859589, 828023569353871016099054873610645592579, 3834965867062595899595546144451189629655, 5083410101797762407471893731877939884166, 6199590917760184276466050254032811548454, 208337506454727094683323122852921121527, 5210709327454808237359999225611588134922, 239093795148407379152016295908193630983, 29793049900271876372064873251244672365333, 1641943491807405218384351799880631607416, 1685895805013787734204509484411577153108, 1511298522529374764380482522275435302730]
q = n // p

c = libnum.solve_crt(res, mod)
d = gmpy2.invert(e, (p - 1) * (q - 1))
m = gmpy2.powmod(c, d, n)
print(libnum.n2s(int(m)))